[
{
    "title": "HTML",
    "content": "<h1>Introduction</h1><i>'HTML documents represent a media-independent description of interactive content</i>.</br></br> HTML documents might be rendered to a screen, or through a speech synthesizer, or on a braille display. To influence exactly how such rendering takes place, authors can use a styling language such as CSS.'HTML stands for Hyper Text Markup Language. HTML is the standard markup language for creating Web pages. HTML describes the structure of a Web page. An HTML element is defined by a start tag, some content, and an end tag.The purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly. A browser does not display the HTML tags, but uses them to determine how to display the document. <h1>Features</h1><p>It is also worth noting that HTML is not considered a programming language as it cannot create dynamic functionality, although it is now considered an official web standard. The World Wide Web Consortium (W3C) maintains and develops HTML specifications, along with providing regular updates. The average website includes several different HTML pages. For instance, a home page, an about page, and a contact page would all have separate HTML files.HTML documents are files that end with a .html or .htm extension. A web browser reads the HTML file and renders its content so that internet users can view it.All HTML pages have a series of HTML elements, consisting of a set of tags and attributes. HTML elements are the building blocks of a web page. A tag tells the web browser where an element begins and ends, whereas an attribute describes the characteristics of an element. The three main parts of an element are: <ul><li>Opening tag : used to state where an element starts to take effect. The tag is wrapped with opening and closing angle brackets. For example, use the start tag To create a paragraph </li> <li>Content : this is the output that other users see </li> <li>Closing tag : the same as the opening tag, but with a forward slash before the element name. For example, to end a paragraph  </li> </ul> </br> <h1>Additional resources:</h1>Currently, there are <b>142 HTML tags</b> available that allow for the creation of various elements. Even though modern browsers no longer support some of these tags, learning all the different elements available is still beneficial.<br/><br/> ",
    "author": "W3Schools",
    "date": "2023-10-21"
},
{
    "title": "CSS",
    "content": "<a href=''>CSS</a> (Cascading Style Sheets) allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS is with a simple syntax example and also covers some key terms about the language. <p>In the Introduction to HTML module, we covered what HTML is and how it is used to mark up documents. These documents will be readable in a web browser. Headings will look larger than regular text, paragraphs break onto a new line and have space between them. Links are colored and underlined to distinguish them from the rest of the text. What you are seeing are the browser's default styles — very basic styles — that the browser applies to HTML to make sure that the page will be basically readable even if no explicit styling is specified by the author of the page.</p> <p>However, the web would be a boring place if all websites looked like that. Using CSS, you can control exactly how HTML elements look in the browser, presenting your markup using whatever design you like.</p> <p><h1>What is CSS for?</h1><p>As we have mentioned before, CSS is a language for specifying how documents are presented to users — how they are styled, laid out, etc.</p><p>A document is usually a text file structured using a markup language — HTML is the most common markup language, but you may also come across other markup languages such as SVG or XML.</p><p>Presenting a document to a user means converting it into a form usable by your audience. Browsers, like Firefox, Chrome, or Edge, are designed to present documents visually, for example, on a computer screen, projector, or printer.</p></p><p><h1>CSS Syntax</h1><p>CSS is a rule-based language — you define the rules by specifying groups of styles that should be applied to particular elements or groups of elements on your web page.</br><ul><li>In the above example, the CSS rule opens with a selector. This selects the HTML element that we are going to style. In this case, we are styling level one headings (h1).</li><li>We then have a set of curly braces { }.</li><li>Inside the braces will be one or more declarations, which take the form of property and value pairs. We specify the property (color in the above example) before the colon, and we specify the value of the property after the colon (red in this example).</li><li>This example contains two declarations, one for color and the other for font-size. Each pair specifies a property of the element(s) we are selecting (h1 in this case), then a value that we'd like to give the property.</li></ul></p></p>",
    "author": "MDN web_docs",
    "date": "2023-10-22"
},
{
    "title": "JavaScript",
    "content": "<p><i>JavaScript (JS) is a lightweight interpreted (or just-in-time compiled) programming language</i> with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as Node.js, Apache CouchDB and Adobe Acrobat. JavaScript is a prototype-based, multi-paradigm, single-threaded, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.</p><p>JavaScript's dynamic capabilities include runtime object construction, variable parameter lists, function variables, dynamic script creation (via eval), object introspection (via for...in and Object utilities), and source-code recovery (JavaScript functions store their source text and can be retrieved through toString()).</p><p><h1>A background on modules</h1><p>JavaScript programs started off pretty small — most of its usage in the early days was to do isolated scripting tasks, providing a bit of interactivity to your web pages where needed, so large scripts were generally not needed. Fast forward a few years and we now have complete applications being run in browsers with a lot of JavaScript, as well as JavaScript being used in other contexts (Node.js, for example).</p><p>The good news is that modern browsers have started to support module functionality natively, and this is what this article is all about. This can only be a good thing — browsers can optimize loading of modules, making it more efficient than having to use a library and do all of that extra client-side processing and extra round trips.</p><br/><p><h1>JavaScript Objects</h1></p><p><table><thead><tr><th>Array</th><th>String</th><th>Number</th><th>Math</th></tr></thead><tbody><tr><th>Date</th><th>Global</th><th>RegExp</th><th>Object</th></tr><tr><th>Classes</th><th>Error</th><th>Boolean</th><th>Operators</th></tr></tbody></table></p><p><h1>Conclusion</h1></p><p>If you have followed all the instructions in this article, you should end up with a page that looks something like the image below. You can also view our version.</p></p>",
    "author": "MDN web docs & W3schools",
    "date": "2023-10-21"
},
{
    "title": "REACT",
    "content": "<h4>Welcome to REACT</h4><p>In this article we will say hello to React. We'll discover a little bit of detail about its background and use cases, set up a basic React toolchain on our local computer, and create and play with a simple starter app — learning a bit about how React works in the process.</p><h1>Hello REACT</h1><p>As its official tagline states, React is a library for building user interfaces. React is not a framework : it's not even exclusive to the web. It's used with other libraries to render to certain environments. For instance, React Native can be used to build mobile applications.</p><p>To build for the web, developers use React in tandem with ReactDOM. React and ReactDOM are often discussed in the same spaces as — and utilized to solve the same problems as — other true web development frameworks. When we refer to React as a 'framework', we're working with that colloquial understanding.</p><h1>How does React use JavaScript?</h1><p> React utilizes features of modern JavaScript for many of its patterns. Its biggest departure from JavaScript comes with the use of JSX syntax. JSX extends JavaScript's syntax so that HTML-like code can live alongside it.  Setting up your first React app There are many ways to use React, but we're going to use the command-line interface (CLI) tool create-react-app, as mentioned earlier, which expedites the process of developing a React application by installing some packages and creating some files for you, handling the tooling described above.</p><p>It's possible to add React to a website without create-react-app by copying some elements into an HTML file, but the create-react-app CLI is a common starting point for React applications. Using it will allow you to spend more time building your app, and less time fussing with setup.</p><h1>Summary</h1><p>This brings us to the end of our initial look at React, including how to install it locally, creating a starter app, and how the basics work. In the next article, we'll start building our first proper application &mdash; a todo list. Before we do that, however, let's recap some of the things we've learned.</p><p>In React:</p> <ul><li>Components can import modules they need and must export themselves at the bottom of their files.</li><li> Component functions are named with PascalCase.</li><li> You can read JSX variables by putting them between curly braces, like {so}.</li><li> Some JSX attributes are different than HTML attributes so that they don't conflict with JavaScript reserved words. For example, class in HTML translates to className in JSX. Note that multi-word attributes are in camelCase.</li> <li>Props are written just like attributes inside component calls and are passed into components.</li></ul>",
    "author": "Kaviprakash Ramalingam",
    "date": "2023-10-21"
}
]